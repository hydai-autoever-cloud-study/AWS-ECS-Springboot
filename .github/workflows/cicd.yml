name: Java CI with Gradle
# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: apiserver
  ECS_SERVICE: api-service
  ECS_CLUSTER: api-cluster
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: api-server

jobs:
# Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v1
      with:
        arguments: clean bootJar

    # 3. DockerHub 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
       username: ${{secrets.DOCKERHUB_USERNAME}}
       password: ${{secrets.DOCKERHUB_TOKEN}}

    # 4. 이미지 업로드
    - name: build and release to DockerHub
      env:
       NAME: ${{secrets.DOCKERHUB_USERNAME}}
       REPO: springapiserver
      run: |
       docker build -t $REPO .
       docker tag $REPO:latest $NAME/$REPO:latest 
       docker push $NAME/$REPO:latest

  deploy:
      name: Deploy to Amazon ECS
      needs: build-and-push
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        # Step 3: Update ECS service with Docker Hub image
        - name: Deploy to Amazon ECS
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            service: api-service
            cluster: api-cluster
            task-definition: ./gihub/workflows/task-definition.json
            container-name: api-server
            image: jse0111/springapiserver:latest